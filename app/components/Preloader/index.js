import Loader from 'assets-loader'
import WebFontLoader from 'webfontloader'

import { TweenMax } from 'gsap'
import { each } from 'lodash'

import Element from '../../classes/Element'

import styles from './styles.scss'

import Data from '../../data/Work'

export default class extends Element {
  constructor () {
    super({
      element: 'div',
      name: 'Preloader'
    })

    this.element.className = `Preloader ${styles.preloader}`
    this.element.innerHTML = `
      <svg class="${styles.preloader__media}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40.6 80.2">
        
      <path d="M 12.906 44.984 A 87.713 87.713 0 0 0 10.922 53.553 A 3.64 3.64 0 0 1 10.217 54.991 A 3.858 3.858 0 0 1 9.022 55.953 Q 8.422 56.353 7.872 56.803 A 11.243 11.243 0 0 0 7.762 56.895 Q 7.418 57.183 7.343 57.301 A 0.108 0.108 0 0 0 7.322 57.353 A 0.104 0.104 0 0 0 7.353 57.39 Q 7.497 57.499 8.119 57.279 A 6.989 6.989 0 0 0 8.322 57.203 A 83.589 83.589 0 0 0 8.435 57.159 Q 9.075 56.91 9.323 56.8 A 2.478 2.478 0 0 0 9.422 56.753 Q 13.822 54.553 18.272 52.103 Q 22.722 49.653 26.672 46.753 Q 30.622 43.853 33.822 40.403 Q 37.022 36.953 39.122 32.753 Q 40.722 29.453 40.922 25.903 A 17.273 17.273 0 0 0 40.95 24.932 A 15.388 15.388 0 0 0 39.872 19.203 Q 38.622 16.053 36.022 13.553 Q 33.422 11.053 29.422 9.853 Q 25.622 8.753 21.722 8.503 A 43.14 43.14 0 0 0 18.962 8.414 A 40.054 40.054 0 0 0 14.122 8.703 Q 10.422 9.153 6.972 10.303 Q 3.522 11.453 0.722 13.153 Q 0.644 13.231 0.413 13.371 A 6.963 6.963 0 0 1 0.272 13.453 Q -0.027 13.624 0.003 13.795 A 0.21 0.21 0 0 0 0.022 13.853 Q 0.122 14.053 0.922 13.853 A 128.511 128.511 0 0 1 1.55 13.654 A 141.846 141.846 0 0 1 6.122 12.303 Q 8.822 11.553 11.722 11.153 A 53.709 53.709 0 0 1 11.589 12.081 A 59.177 59.177 0 0 1 10.172 18.703 A 347.674 347.674 0 0 1 10.04 19.185 A 378.983 378.983 0 0 1 7.922 26.603 Q 6.722 30.653 5.422 34.853 Q 4.122 39.053 3.122 43.253 Q 2.222 47.153 1.672 51.253 Q 1.122 55.353 1.422 59.303 Q 1.722 63.253 3.022 66.953 Q 4.322 70.653 7.022 73.753 Q 7.322 73.953 7.572 74.003 Q 7.797 74.048 7.578 73.65 A 2.933 2.933 0 0 0 7.522 73.553 A 24.167 24.167 0 0 1 7.042 72.602 A 26.389 26.389 0 0 1 5.122 67.003 Q 4.322 63.453 4.222 59.753 Q 4.122 56.053 4.522 52.353 Q 4.922 48.653 5.722 45.353 Q 6.722 41.053 8.222 36.653 Q 9.722 32.253 11.022 27.903 Q 12.322 23.553 13.172 19.303 A 38.103 38.103 0 0 0 13.933 11.818 A 35.467 35.467 0 0 0 13.922 10.953 A 2.175 2.175 0 0 1 14.068 10.922 Q 14.457 10.853 15.122 10.853 Q 15.01 12.428 14.802 14.241 A 115.238 115.238 0 0 1 14.422 17.203 A 189.663 189.663 0 0 1 14.296 18.087 A 171.739 171.739 0 0 1 13.322 24.053 Q 12.722 27.353 12.122 29.853 A 410.483 410.483 0 0 1 12.086 30.003 Q 11.626 31.916 11.411 32.728 A 18.096 18.096 0 0 1 11.322 33.053 A 12.606 12.606 0 0 0 11.093 33.646 Q 10.907 34.165 10.736 34.768 A 24.829 24.829 0 0 0 10.422 36.003 Q 10.022 37.753 9.722 39.553 A 404.32 404.32 0 0 1 9.703 39.666 A 372.122 372.122 0 0 1 9.122 43.053 Q 8.822 44.753 8.722 45.953 A 1.075 1.075 0 0 1 8.722 45.982 Q 8.717 46.163 8.656 46.707 A 50.029 50.029 0 0 1 8.622 47.003 A 6.52 6.52 0 0 0 8.608 47.131 Q 8.558 47.649 8.638 47.796 A 0.095 0.095 0 0 0 8.722 47.853 A 0.213 0.213 0 0 0 8.79 47.864 Q 9.015 47.864 9.292 47.395 A 3.991 3.991 0 0 0 9.422 47.153 L 9.922 46.153 A 201.877 201.877 0 0 0 11.422 42.448 A 244.181 244.181 0 0 0 13.922 35.803 A 142.593 142.593 0 0 0 14.533 34.075 A 127.655 127.655 0 0 0 17.322 24.953 A 16.58 16.58 0 0 0 17.656 23.616 Q 17.9 22.443 18.029 21.071 A 34.697 34.697 0 0 0 18.172 18.253 A 33.554 33.554 0 0 0 18.175 17.834 Q 18.175 16.659 18.092 15.537 A 25.706 25.706 0 0 0 17.322 10.853 Q 22.522 10.853 27.622 12.353 A 24.527 24.527 0 0 1 28.652 12.696 Q 30.826 13.474 32.508 14.564 A 12.152 12.152 0 0 1 36.872 19.303 Q 39.322 24.153 37.022 30.153 Q 35.622 33.753 33.272 36.853 Q 30.922 39.953 27.922 42.703 Q 24.922 45.453 21.472 47.903 Q 18.022 50.353 14.422 52.753 Q 14.922 51.053 15.322 49.503 Q 15.722 47.953 16.222 46.153 A 143.714 143.714 0 0 1 16.534 44.932 Q 17.092 42.781 17.972 39.603 Q 19.122 35.453 20.022 31.003 Q 20.922 26.553 21.172 22.403 Q 21.422 18.253 20.322 15.753 Q 20.165 15.282 20.07 15.181 A 0.071 0.071 0 0 0 20.022 15.153 L 19.872 15.153 A 0.01 0.01 0 0 0 19.869 15.154 Q 19.828 15.169 19.823 15.536 A 8.232 8.232 0 0 0 19.822 15.653 Q 19.622 21.053 18.422 25.753 Q 17.222 30.453 15.822 34.953 Q 14.422 39.753 13.072 44.403 A 95.858 95.858 0 0 0 12.906 44.984 Z M 51.422 21.153 Q 51.922 25.453 51.172 28.903 A 70.799 70.799 0 0 1 50.603 31.329 Q 50.122 33.216 49.622 34.653 Q 47.922 39.053 45.022 42.703 A 38.573 38.573 0 0 1 39.526 48.363 A 35.555 35.555 0 0 1 38.672 49.053 A 40.442 40.442 0 0 1 32.443 53.089 A 37.155 37.155 0 0 1 31.522 53.553 A 37.843 37.843 0 0 1 28.38 54.918 Q 26.422 55.66 24.622 56.053 Q 23.822 56.253 22.972 56.403 Q 22.154 56.548 22.216 56.368 A 0.12 0.12 0 0 1 22.222 56.353 A 0.14 0.14 0 0 1 22.19 56.306 Q 22.116 56.118 22.754 55.788 A 5.541 5.541 0 0 1 22.822 55.753 Q 23.622 55.353 24.322 55.053 Q 29.922 52.353 34.822 48.653 Q 39.722 44.953 43.222 39.753 Q 44.922 37.253 46.222 34.203 Q 47.522 31.153 48.022 27.853 Q 48.522 24.553 48.022 21.103 A 19.726 19.726 0 0 0 46.152 15.181 A 22.746 22.746 0 0 0 45.722 14.353 A 21.264 21.264 0 0 0 41.567 8.949 A 19.694 19.694 0 0 0 39.822 7.503 Q 36.222 4.853 31.922 3.503 Q 27.622 2.153 23.072 1.903 A 43.204 43.204 0 0 0 20.702 1.838 A 38.748 38.748 0 0 0 14.322 2.353 A 35.153 35.153 0 0 1 14.115 2.387 Q 13.759 2.444 13.65 2.452 A 0.409 0.409 0 0 1 13.622 2.453 Q 13.522 2.453 13.322 2.353 Q 13.322 2.17 13.616 2.071 A 1.237 1.237 0 0 1 13.672 2.053 Q 14.022 1.953 14.322 1.753 A 14.373 14.373 0 0 1 15.764 1.211 Q 16.473 0.983 17.3 0.781 A 32.996 32.996 0 0 1 19.072 0.403 A 23.691 23.691 0 0 1 21.913 0.057 Q 23.672 -0.055 25.622 0.053 A 32.066 32.066 0 0 1 30.056 0.626 A 40.577 40.577 0 0 1 33.272 1.403 Q 37.322 2.553 41.422 5.253 Q 45.522 7.953 48.172 12.303 A 24.541 24.541 0 0 1 50.574 17.452 A 20.736 20.736 0 0 1 51.422 21.153 Z M 46.119 21.116 A 16.765 16.765 0 0 0 45.122 16.953 Q 44.222 14.553 42.622 12.553 Q 41.022 10.553 39.072 8.953 Q 37.122 7.353 34.872 6.203 A 35.627 35.627 0 0 0 33.206 5.404 A 29.186 29.186 0 0 0 30.522 4.353 A 19.638 19.638 0 0 0 27.337 3.589 Q 25.491 3.301 23.431 3.301 A 29.82 29.82 0 0 0 23.072 3.303 Q 18.922 3.353 14.972 4.203 A 44.068 44.068 0 0 0 12.108 4.918 A 36.03 36.03 0 0 0 7.772 6.453 A 24.833 24.833 0 0 0 5.969 7.312 Q 5.032 7.809 4.285 8.329 A 10.039 10.039 0 0 0 2.922 9.453 L 2.422 9.953 Q 2.122 10.253 2.222 10.453 A 0.037 0.037 0 0 0 2.225 10.469 Q 2.256 10.536 2.579 10.473 A 3.645 3.645 0 0 0 2.672 10.453 Q 2.925 10.397 3.194 10.278 A 3.961 3.961 0 0 0 3.622 10.053 Q 4.722 9.453 6.972 8.753 Q 8.238 8.36 9.725 8.029 A 49.192 49.192 0 0 1 12.172 7.553 A 46.316 46.316 0 0 1 14.441 7.228 A 54.959 54.959 0 0 1 18.472 6.903 Q 21.822 6.753 25.122 7.053 A 22.123 22.123 0 0 1 27.476 7.385 A 17.624 17.624 0 0 1 31.222 8.553 A 32.702 32.702 0 0 1 33.6 9.722 A 24.534 24.534 0 0 1 35.922 11.153 Q 37.922 12.553 39.122 13.803 A 46.809 46.809 0 0 1 39.162 13.845 Q 40.329 15.063 40.722 15.653 A 8.582 8.582 0 0 1 40.889 15.883 Q 41.968 17.426 42.572 19.703 Q 43.222 22.153 43.372 24.753 Q 43.522 27.353 43.222 29.803 A 17.178 17.178 0 0 1 43.171 30.187 Q 42.851 32.388 42.022 33.953 L 41.722 34.553 A 4.941 4.941 0 0 0 41.557 34.922 A 6.235 6.235 0 0 0 41.372 35.453 Q 41.222 35.953 41.072 36.353 A 3.204 3.204 0 0 0 41.041 36.441 Q 40.934 36.753 41.022 36.753 A 0.094 0.094 0 0 0 41.049 36.772 Q 41.139 36.815 41.336 36.671 A 1.726 1.726 0 0 0 41.422 36.603 A 2.23 2.23 0 0 0 41.563 36.475 Q 41.793 36.248 42.022 35.903 L 42.622 35.003 Q 42.838 34.68 43.002 34.486 A 2.138 2.138 0 0 1 43.122 34.353 A 17.287 17.287 0 0 0 43.949 32.867 A 21.52 21.52 0 0 0 44.872 30.703 Q 45.622 28.653 45.972 26.403 Q 46.322 24.153 46.172 21.753 A 15.521 15.521 0 0 0 46.119 21.116 Z M 21.15 52.782 A 228.318 228.318 0 0 0 21.372 52.653 Q 23.622 51.353 25.722 50.153 A 133.672 133.672 0 0 1 27.22 49.31 Q 27.812 48.981 28.35 48.692 A 70.225 70.225 0 0 1 29.372 48.153 Q 30.743 47.446 30.98 47.52 A 0.067 0.067 0 0 1 31.022 47.553 A 0.063 0.063 0 0 1 31.04 47.591 Q 31.057 47.729 30.692 48.179 A 6.95 6.95 0 0 1 30.672 48.203 Q 30.295 48.664 29.743 49.195 A 17.664 17.664 0 0 1 29.522 49.403 Q 28.822 50.053 28.122 50.653 Q 27.545 51.148 27.172 51.439 A 10.308 10.308 0 0 1 27.022 51.553 A 49.783 49.783 0 0 1 24.05 53.485 A 43.73 43.73 0 0 1 23.072 54.053 Q 21.122 55.153 19.122 56.053 Q 17.422 56.853 15.672 57.453 Q 13.922 58.053 12.122 58.753 Q 11.622 60.153 11.272 61.553 L 10.622 64.153 Q 10.522 64.653 10.372 65.153 Q 10.222 65.653 10.122 65.653 A 0.257 0.257 0 0 1 10.023 65.556 Q 9.908 65.373 9.872 64.903 Q 9.822 64.253 9.822 63.853 L 9.822 61.703 A 26.574 26.574 0 0 1 9.836 60.815 Q 9.851 60.378 9.881 59.994 A 13.504 13.504 0 0 1 9.922 59.553 Q 9.222 59.753 8.572 60.153 A 1.253 1.253 0 0 0 8.229 60.456 Q 7.955 60.813 8.022 61.353 Q 8.022 64.353 8.322 66.753 Q 8.822 70.153 10.122 73.253 L 10.372 73.753 Q 10.487 73.982 10.456 74.095 A 0.13 0.13 0 0 1 10.422 74.153 Q 10.246 74.242 9.679 73.862 A 6.393 6.393 0 0 1 9.522 73.753 A 27.467 27.467 0 0 1 8.264 72.023 A 22.722 22.722 0 0 1 7.622 71.003 Q 6.9 69.784 6.422 67.381 A 27.392 27.392 0 0 1 6.322 66.853 A 8.052 8.052 0 0 1 6.212 66.232 Q 6.113 65.533 6.077 64.585 A 25.832 25.832 0 0 1 6.072 64.453 A 29.359 29.359 0 0 1 6.056 63.476 Q 6.056 62.52 6.122 61.653 A 3.613 3.613 0 0 1 6.188 60.947 A 2.74 2.74 0 0 1 6.422 60.253 Q 6.722 59.653 7.722 59.153 Q 8.275 58.877 9.548 58.304 A 166.404 166.404 0 0 1 9.772 58.203 Q 11.222 57.553 12.822 56.853 Q 14.422 56.153 15.772 55.553 Q 16.88 55.061 17.415 54.838 A 16.021 16.021 0 0 1 17.622 54.753 Q 19.048 53.993 21.15 52.782 Z" id="0" vector-effect="non-scaling-stroke"/>
      </svg>
      `
    

    this.elements = {
      path: this.element.querySelectorAll('.Path')
    }

    this.assets = []

    this.setup()
    this.show()
  }

  setup () {
    each(this.elements.path, path => {
      path.style.strokeDasharray = `${path.getTotalLength()}px`
      path.style.strokeDashoffset = `${path.getTotalLength()}px`
    })

    each(Data, data => {
      this.assets.push(data.image)
    })

    Loader({ assets: this.assets }).on('progress', this.onProgress).on('complete', this.onComplete).start()
  }

  show () {
    TweenMax.set(this.element, {
      autoAlpha: 1
    })

    return super.show()
  }

  hide () {
    TweenMax.set(this.element, {
      autoAlpha: 0
    })

    return super.hide()
  }

  onProgress (progress) {
    this.element.style.visibility = 'visible'

    each(this.elements.path, path => {
      const length = path.getTotalLength() - (path.getTotalLength() * progress)

      path.style.strokeDashoffset = `${length}px`
    })
  }

  onComplete (assets) {
    each(this.elements.path, path => {
      path.style.strokeDashoffset = 0
    })

    TweenMax.delayedCall(0.5, () => {
      WebFontLoader.load({
        custom: {
          families: ['Borda']
        },
        urls: [
          require('../../styles/fonts.scss')
        ],
        active: () => {
          this.emit('preloaded', assets)
          this.hide()
        }
      })
    })
  }
}
